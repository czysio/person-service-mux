// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPersonStmt, err = db.PrepareContext(ctx, createPerson); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePerson: %w", err)
	}
	if q.deletePersonStmt, err = db.PrepareContext(ctx, deletePerson); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePerson: %w", err)
	}
	if q.getPeopleStmt, err = db.PrepareContext(ctx, getPeople); err != nil {
		return nil, fmt.Errorf("error preparing query GetPeople: %w", err)
	}
	if q.getPersonByIdStmt, err = db.PrepareContext(ctx, getPersonById); err != nil {
		return nil, fmt.Errorf("error preparing query GetPersonById: %w", err)
	}
	if q.updatePersonStmt, err = db.PrepareContext(ctx, updatePerson); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePerson: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPersonStmt != nil {
		if cerr := q.createPersonStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPersonStmt: %w", cerr)
		}
	}
	if q.deletePersonStmt != nil {
		if cerr := q.deletePersonStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePersonStmt: %w", cerr)
		}
	}
	if q.getPeopleStmt != nil {
		if cerr := q.getPeopleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPeopleStmt: %w", cerr)
		}
	}
	if q.getPersonByIdStmt != nil {
		if cerr := q.getPersonByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPersonByIdStmt: %w", cerr)
		}
	}
	if q.updatePersonStmt != nil {
		if cerr := q.updatePersonStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePersonStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	createPersonStmt  *sql.Stmt
	deletePersonStmt  *sql.Stmt
	getPeopleStmt     *sql.Stmt
	getPersonByIdStmt *sql.Stmt
	updatePersonStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		createPersonStmt:  q.createPersonStmt,
		deletePersonStmt:  q.deletePersonStmt,
		getPeopleStmt:     q.getPeopleStmt,
		getPersonByIdStmt: q.getPersonByIdStmt,
		updatePersonStmt:  q.updatePersonStmt,
	}
}
